import numpy as np

import matplotlib
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from matplotlib.colorbar import Colorbar
import matplotlib.patches as patches
import matplotlib.gridspec as gridspec
import matplotlib.mlab as mlab

import scipy
from scipy import io
from scipy.stats import iqr, norm
from scipy.stats.kde import gaussian_kde

from astropy.convolution import convolve, convolve_fft, Gaussian2DKernel

import copy
import glob
import re


def collector(path):
    '''
    Collects all IDL save data from a given path
    and stores each file as an element in a list.
    '''

    filenames = glob.glob(path)

    data = {'data': [scipy.io.readsav(filenames[i], python_dict=True)
            for i in range(len(filenames))], 'filenames': filenames}

    return data


def separator(data):
    '''
    Compiles data into separate lists
    of extended and point sources
    '''

    point_data = [[data['data'][i]['source_array'][j]
                   for j in range(len(data['data'][i]['source_array']))
                  if data['data'][i]['source_array'][j][-2] is None]
                  for i in range(len(data['data']))]

    extended_data = [[data['data'][i]['source_array'][j]
                      for j in range(len(data['data'][i]['source_array']))
                     if data['data'][i]['source_array'][j][-2] is not None]
                     for i in range(len(data['data']))]

    return {'extsources': extended_data, 'psources': point_data}


def pixelate(ra_zoom, dec_zoom, n_bins, ra_total, dec_total, flux_total):
    import numpy as np
    # Check to see which dimension is larger so that a square in ra,dec can
    # be returned
    if (ra_zoom[1] - ra_zoom[0]) > (dec_zoom[1] - dec_zoom[0]):
        zoom = ra_zoom
    else:
        zoom = dec_zoom

    # Find the size of the bins using the largest dimension and the num of bins
    binsize = (zoom[1] - zoom[0]) / n_bins

    # Create arrays for ra and dec that give the left side of each pixel
    ra_bin_array = (np.array(range(n_bins)) * binsize) + ra_zoom[0]
    dec_bin_array = (np.array(range(n_bins)) * binsize) + dec_zoom[0]
    # Create an empty array of pixels to be filled in the for loops
    pixels = np.zeros((len(ra_bin_array), len(dec_bin_array)))
    # Histogram components into ra bins
    ra_histogram = np.digitize(ra_total, ra_bin_array)
    # Begin for loop over both dimensions of pixels, starting with ra
    for bin_i in range(len(ra_bin_array) - 2):
        # Find the indices that fall into the current ra bin slice
        ra_inds = np.where(ra_histogram == bin_i)
        # Go to next for cycle if no indices fall into current ra bin slice
        if len(ra_inds[0]) == 0:
            continue

        # Histogram components that fall into the current ra bin slice by dec
        dec_histogram = np.digitize(dec_total[ra_inds], dec_bin_array)
        # Begin for loop by dec over ra bin slice
        for bin_j in range(len(dec_bin_array) - 2):
            # Find the indicies that fall into the current dec bin
            dec_inds = np.where(dec_histogram == bin_j)
            # Go to next for cycle if no indices fall into current dec bin
            if len(dec_inds[0]) == 0:
                continue
            # Sum the flux components that fall into current ra/dec bin
            pixels[bin_i, bin_j] = np.sum(flux_total[ra_inds[0][dec_inds][0]])

    # Find the pixel centers in ra/dec for plotting purposes
    ra_pixel_centers = (np.arange(n_bins) * binsize) + ra_zoom[0] + binsize / 2.
    dec_pixel_centers = (np.arange(n_bins) * binsize) + dec_zoom[0] + binsize / 2.

    return pixels, ra_pixel_centers, dec_pixel_centers


def seeker(data):
    """
    Seeks the data.
    You know what it does.
    """
    separated = separator(data)
    indexed_point_sources_RA = [[separated['psources'][i][j]['RA']
                                 for j in range(len(separated['psources'][i]))]
                                for i in range(len(separated['psources']))]
    indexed_point_sources_DEC = [[separated['psources'][i][j]['DEC']
                                  for j in range(len(separated['psources'][i]))]
                                 for i in range(len(separated['psources']))]
    indexed_point_sources_FLUX = [[separated['psources'][i][j]['FLUX']['I'][0]
                                   for j in range(len(separated['psources'][i]))]
                                  for i in range(len(separated['psources']))]
    indexed_point_sources_XX = [[separated['psources'][i][j]['FLUX']['XX'][0]
                                 for j in range(len(separated['psources'][i]))]
                                for i in range(len(separated['psources']))]
    indexed_point_sources_YY = [[separated['psources'][i][j]['FLUX']['YY'][0]
                                 for j in range(len(separated['psources'][i]))]
                                for i in range(len(separated['psources']))]
    indexed_EO_sources_RA = [[[separated['extsources'][i][j]['EXTEND']['RA'][k]
                               for k in range(len(separated['extsources'][i][j]['EXTEND']['RA']))]
                              for j in range(len(separated['extsources'][i]))]
                             for i in range(len(separated['extsources']))]
    indexed_EO_sources_DEC = [[[separated['extsources'][i][j]['EXTEND']['DEC'][k]
                                for k in range(len(separated['extsources'][i][j]['EXTEND']['DEC']))]
                               for j in range(len(separated['extsources'][i]))]
                              for i in range(len(separated['extsources']))]
    indexed_EO_sources_FLUX = [[[separated['extsources'][i][j]['EXTEND']['FLUX'][k]['I'][0]
                                 for k in range(len(separated['extsources'][i][j]['EXTEND']['FLUX']))]
                                for j in range(len(separated['extsources'][i]))]
                               for i in range(len(separated['extsources']))]
    indexed_EO_sources_XX = [[[separated['extsources'][i][j]['EXTEND']['FLUX'][k]['XX'][0]
                               for k in range(len(separated['extsources'][i][j]['EXTEND']['FLUX']))]
                              for j in range(len(separated['extsources'][i]))]
                             for i in range(len(separated['extsources']))]
    indexed_EO_sources_YY = [[[separated['extsources'][i][j]['EXTEND']['FLUX'][k]['YY'][0]
                               for k in range(len(separated['extsources'][i][j]['EXTEND']['FLUX']))]
                              for j in range(len(separated['extsources'][i]))]
                             for i in range(len(separated['extsources']))]
    # Fixing RA values to range between -180 and +180.
    for i in range(len(data['data'])):
        for j in range(len(indexed_EO_sources_RA[i])):
            for k in range(len(indexed_EO_sources_RA[i][j])):
                if indexed_EO_sources_RA[i][j][k] > 180:
                    indexed_EO_sources_RA[i][j][k] -= 360
        for j in range(len(indexed_point_sources_RA[i])):
            if indexed_point_sources_RA[i][j] > 180:
                indexed_point_sources_RA[i][j] -= 360
    all_RA = [[indexed_point_sources_RA[i][j]
               for j in range(len(indexed_point_sources_RA[i]))] +
              [indexed_EO_sources_RA[i][j][k]
              for j in range(len(indexed_EO_sources_RA[i]))
              for k in range(len(indexed_EO_sources_RA[i][j]))]
              for i in range(len(data['data']))]
    all_DEC = [[indexed_point_sources_DEC[i][j]
                for j in range(len(indexed_point_sources_DEC[i]))] +
               [indexed_EO_sources_DEC[i][j][k]
               for j in range(len(indexed_EO_sources_DEC[i]))
               for k in range(len(indexed_EO_sources_DEC[i][j]))]
               for i in range(len(data['data']))]
    all_FLUX = [[indexed_point_sources_FLUX[i][j]
                 for j in range(len(indexed_point_sources_FLUX[i]))] +
                [indexed_EO_sources_FLUX[i][j][k]
                for j in range(len(indexed_EO_sources_FLUX[i]))
                for k in range(len(indexed_EO_sources_FLUX[i][j]))]
                for i in range(len(data['data']))]
    all_XX = [[indexed_point_sources_XX[i][j]
               for j in range(len(indexed_point_sources_XX[i]))] +
              [indexed_EO_sources_XX[i][j][k]
              for j in range(len(indexed_EO_sources_XX[i]))
              for k in range(len(indexed_EO_sources_XX[i][j]))]
              for i in range(len(data['data']))]
    all_YY = [[indexed_point_sources_YY[i][j]
               for j in range(len(indexed_point_sources_YY[i]))] +
              [indexed_EO_sources_YY[i][j][k]
              for j in range(len(indexed_EO_sources_YY[i]))
              for k in range(len(indexed_EO_sources_YY[i][j]))]
              for i in range(len(data['data']))]
    all_BEAM = [np.asarray(np.asarray(all_XX[i]) + np.asarray(all_YY[i])) / np.asarray(all_FLUX[i])
                for i in range(len(data['data']))]
    return {'indexed_point_sources_RA': indexed_point_sources_RA,
            'indexed_point_sources_DEC': indexed_point_sources_DEC,
            'indexed_point_sources_FLUX': indexed_point_sources_FLUX,
            'indexed_point_sources_XX': indexed_point_sources_XX,
            'indexed_point_sources_YY': indexed_point_sources_YY,
            'indexed_EO_sources_RA': indexed_EO_sources_RA,
            'indexed_EO_sources_DEC': indexed_EO_sources_DEC,
            'indexed_EO_sources_FLUX': indexed_EO_sources_FLUX,
            'indexed_EO_sources_XX': indexed_EO_sources_XX,
            'indexed_EO_sources_YY': indexed_EO_sources_YY,
            'all_RA': all_RA, 'all_DEC': all_DEC, 'all_FLUX': all_FLUX,
            'all_XX': all_XX, 'all_YY': all_YY, 'all_BEAM': all_BEAM}


def chaser(indexed_EO_sources_RA, indexed_EO_sources_DEC, indexed_EO_sources_FLUX, radius, i=0, j=0, n=0):
    """
    Chases.
    You know.
    """
    if n == 0:
        brightest_index = indexed_EO_sources_FLUX[i][j].index(max(indexed_EO_sources_FLUX[i][j]))
    if n > 0:
        brightest_index = indexed_EO_sources_FLUX[i][j].index(max(indexed_EO_sources_FLUX[i][j]
                                                              [:-min(n, len(indexed_EO_sources_FLUX[i][j]) - 1)]))

    # Finds RA, DEC, and FLUX values for the brightest components of each EO,
    # as well as all neighboring components within a user-defined radius.
    if n == 0:
        brightest_RA = [indexed_EO_sources_RA[i][j][k]
                        for k in range(len(indexed_EO_sources_RA[i][j]))
                        if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                        (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]

        brightest_DEC = [indexed_EO_sources_DEC[i][j][k]
                         for k in range(len(indexed_EO_sources_DEC[i][j]))
                         if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                         (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]

        brightest_FLUX = [indexed_EO_sources_FLUX[i][j][k]
                          for k in range(len(indexed_EO_sources_FLUX[i][j]))
                          if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                          (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]
    if n > 0:
        brightest_RA = [indexed_EO_sources_RA[i][j][k]
                        for k in range(len(indexed_EO_sources_RA[i][j][:-min(n, len(indexed_EO_sources_RA[i][j]) - 1)]))
                        if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                        (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]

        brightest_DEC = [indexed_EO_sources_DEC[i][j][k]
                         for k in range(len(indexed_EO_sources_DEC[i][j][:-min(n, len(indexed_EO_sources_DEC[i][j]) - 1)]))
                         if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                         (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]

        brightest_FLUX = [indexed_EO_sources_FLUX[i][j][k]
                          for k in range(len(indexed_EO_sources_FLUX[i][j][:-min(n, len(indexed_EO_sources_FLUX[i][j]) - 1)]))
                          if np.sqrt((indexed_EO_sources_RA[i][j][k] - indexed_EO_sources_RA[i][j][brightest_index])**2 +
                          (indexed_EO_sources_DEC[i][j][k] - indexed_EO_sources_DEC[i][j][brightest_index])**2) < radius / 3600.]
    return {'brightest_RA': brightest_RA, 'brightest_DEC': brightest_DEC, 'brightest_FLUX': brightest_FLUX}


def beater(brightest_RA, brightest_DEC, brightest_FLUX):
    """
    Beater.
    Does the weighting and summing.
    """
    weighted_RA = np.average(brightest_RA, weights=brightest_FLUX)
    weighted_DEC = np.average(brightest_DEC, weights=brightest_FLUX)
    weighted_FLUX = sum(brightest_FLUX)
    return {'weighted_RA': weighted_RA, 'weighted_DEC': weighted_DEC, 'weighted_FLUX': weighted_FLUX}


def list_keeper(original_list, old_values, new_value):
    new_value = new_value
    if len(old_values) > 1:
        [original_list.remove(value) for value in old_values]
        original_list.append(new_value)
        return original_list
    else:
        return original_list


def bright_keeper(bright_list, original_list, old_values, new_value):
    if len(old_values) > 1:
        reformatted_list = copy.copy(bright_list)
        if bright_list == original_list:
            reformatted_list = []
        [reformatted_list.append(value) for value in old_values]
        return reformatted_list
    elif bright_list != original_list:
        return bright_list
    elif bright_list == original_list:
        return [0]


def weight_keeper(weight_list, original_list, old_values, new_value):
    if len(old_values) > 1:
        reformatted_list = copy.copy(weight_list)
        if weight_list == original_list:
            reformatted_list = []
        reformatted_list.append(new_value)
        return reformatted_list
    elif weight_list != original_list:
        return weight_list
    elif weight_list == original_list:
        return [0]


def modeler(data, radius, percent):
    """
    Definition.
    Does all the things.
    """
    sought = seeker(data)
    indexed_EO_sources_RA = copy.deepcopy(sought['indexed_EO_sources_RA'])
    indexed_EO_sources_DEC = copy.deepcopy(sought['indexed_EO_sources_DEC'])
    indexed_EO_sources_FLUX = copy.deepcopy(sought['indexed_EO_sources_FLUX'])
    added_EO_sources_RA = copy.deepcopy(sought['indexed_EO_sources_RA'])
    added_EO_sources_DEC = copy.deepcopy(sought['indexed_EO_sources_DEC'])
    added_EO_sources_FLUX = copy.deepcopy(sought['indexed_EO_sources_FLUX'])
    removed_EO_sources_RA = copy.deepcopy(sought['indexed_EO_sources_RA'])
    removed_EO_sources_DEC = copy.deepcopy(sought['indexed_EO_sources_DEC'])
    removed_EO_sources_FLUX = copy.deepcopy(sought['indexed_EO_sources_FLUX'])
    for i in range(len(data['data'])):
        for j in range(len(indexed_EO_sources_FLUX[i])):
            weighted_FLUX = 1e5
            RA_0 = 1
            RA_f = 0
            m = 0
            while (weighted_FLUX >= percent * sum(indexed_EO_sources_FLUX[i][j]))
            and (RA_0 > RA_f):

                chased = chaser(indexed_EO_sources_RA, indexed_EO_sources_DEC, indexed_EO_sources_FLUX, radius, i=i, j=j, n=m)
                brightest_RA = chased['brightest_RA']
                brightest_DEC = chased['brightest_DEC']
                brightest_FLUX = chased['brightest_FLUX']

                weighted = beater(brightest_RA, brightest_DEC, brightest_FLUX)
                weighted_RA = weighted['weighted_RA']
                weighted_DEC = weighted['weighted_DEC']
                weighted_FLUX = weighted['weighted_FLUX']

                RA_0 = len(indexed_EO_sources_RA[i][j])
                indexed_EO_sources_RA[i][j] = copy.deepcopy(list_keeper(indexed_EO_sources_RA[i][j],
                                                            brightest_RA, weighted_RA))
                indexed_EO_sources_DEC[i][j] = copy.deepcopy(list_keeper(indexed_EO_sources_DEC[i][j],
                                                             brightest_DEC, weighted_DEC))
                indexed_EO_sources_FLUX[i][j] = copy.deepcopy(list_keeper(indexed_EO_sources_FLUX[i][j],
                                                              brightest_FLUX, weighted_FLUX))
                added_EO_sources_RA[i][j] = copy.deepcopy(weight_keeper(added_EO_sources_RA[i][j],
                                                          sought['indexed_EO_sources_RA'][i][j],
                                                          brightest_RA, weighted_RA))
                added_EO_sources_DEC[i][j] = copy.deepcopy(weight_keeper(added_EO_sources_DEC[i][j],
                                                           sought['indexed_EO_sources_DEC'][i][j],
                                                           brightest_DEC, weighted_DEC))
                added_EO_sources_FLUX[i][j] = copy.deepcopy(weight_keeper(added_EO_sources_FLUX[i][j],
                                                            sought['indexed_EO_sources_FLUX'][i][j],
                                                            brightest_FLUX, weighted_FLUX))
                removed_EO_sources_RA[i][j] = copy.deepcopy(bright_keeper(removed_EO_sources_RA[i][j],
                                                            sought['indexed_EO_sources_RA'][i][j],
                                                            brightest_RA, weighted_RA))
                removed_EO_sources_DEC[i][j] = copy.deepcopy(bright_keeper(removed_EO_sources_DEC[i][j],
                                                             sought['indexed_EO_sources_DEC'][i][j],
                                                             brightest_DEC, weighted_DEC))
                removed_EO_sources_FLUX[i][j] = copy.deepcopy(bright_keeper(removed_EO_sources_FLUX[i][j],
                                                              sought['indexed_EO_sources_FLUX'][i][j],
                                                              brightest_FLUX, weighted_FLUX))
                RA_f = len(indexed_EO_sources_RA[i][j])
                m += 1
    return {'indexed_EO_sources_RA': indexed_EO_sources_RA,
            'indexed_EO_sources_DEC': indexed_EO_sources_DEC,
            'indexed_EO_sources_FLUX': indexed_EO_sources_FLUX,
            'added_EO_sources_RA': added_EO_sources_RA,
            'added_EO_sources_DEC': added_EO_sources_DEC,
            'added_EO_sources_FLUX': added_EO_sources_FLUX,
            'removed_EO_sources_RA': removed_EO_sources_RA,
            'removed_EO_sources_DEC': removed_EO_sources_DEC,
            'removed_EO_sources_FLUX': removed_EO_sources_FLUX}


def framer(RA, DEC):
    min_RA, max_RA, min_DEC, max_DEC = min(RA), max(RA), min(DEC), max(DEC)
    min_degrees = 50
    x = max_RA - min_RA
    y = max_DEC - min_DEC
    z = .25 * max(x, y)
    if (x > y) and (x - y > min_degrees / 3600.):
        RA_zoom_min = min_RA - z
        RA_zoom_max = max_RA + z
        DEC_zoom_min = min_DEC - .5 * (x - y) - z
        DEC_zoom_max = max_DEC + .5 * (x - y) + z
    elif (y > x) and (y - x > min_degrees / 3600.):
        RA_zoom_min = min_RA - .5 * (y - x) - z
        RA_zoom_max = max_RA + .5 * (y - x) + z
        DEC_zoom_min = min_DEC - z
        DEC_zoom_max = max_DEC + z
    else:
        RA_zoom_min = RA[0] - .1
        RA_zoom_max = RA[-1] + .1
        DEC_zoom_min = DEC[0] - .1
        DEC_zoom_max = DEC[-1] + .1
    return {'RA_zoom_min': RA_zoom_min, 'RA_zoom_max': RA_zoom_max,
            'DEC_zoom_min': DEC_zoom_min, 'DEC_zoom_max': DEC_zoom_max}


def modelcomparer(data, radius=10, percent=.05, binwidth=3, sigmawidth=9, minI=50, minBeam=.75, EOid=None):
    separated = separator(data)

    modeled = modeler(data, radius, percent)
    modeled_RA = copy.deepcopy(modeled['indexed_EO_sources_RA'])
    modeled_DEC = copy.deepcopy(modeled['indexed_EO_sources_DEC'])
    modeled_FLUX = copy.deepcopy(modeled['indexed_EO_sources_FLUX'])
    added_RA = copy.deepcopy(modeled['added_EO_sources_RA'])
    added_DEC = copy.deepcopy(modeled['added_EO_sources_DEC'])
    added_FLUX = copy.deepcopy(modeled['added_EO_sources_FLUX'])
    removed_RA = copy.deepcopy(modeled['removed_EO_sources_RA'])
    removed_DEC = copy.deepcopy(modeled['removed_EO_sources_DEC'])
    removed_FLUX = copy.deepcopy(modeled['removed_EO_sources_FLUX'])

    sought = seeker(data)
    unmodeled_RA = copy.deepcopy(sought['indexed_EO_sources_RA'])
    unmodeled_DEC = copy.deepcopy(sought['indexed_EO_sources_DEC'])
    unmodeled_FLUX = copy.deepcopy(sought['indexed_EO_sources_FLUX'])
    unmodeled_XX = copy.deepcopy(sought['indexed_EO_sources_XX'])
    unmodeled_YY = copy.deepcopy(sought['indexed_EO_sources_YY'])
    all_RA = copy.deepcopy(sought['all_RA'])
    all_DEC = copy.deepcopy(sought['all_DEC'])
    all_FLUX = copy.deepcopy(sought['all_FLUX'])
    all_XX = copy.deepcopy(sought['all_XX'])
    all_YY = copy.deepcopy(sought['all_YY'])
    all_BEAM = copy.deepcopy(sought['all_BEAM'])

    pixelreplacement = 1e-5
    cmap = matplotlib.cm.get_cmap('gist_heat')
    sigmawidth = sigmawidth * (1. / 3600.)
    binwidth = binwidth * (1. / 3600.)
    kernel = Gaussian2DKernel(stddev=(sigmawidth / binwidth))

    for i in range(len(modeled_RA)):
        for j in range(len(modeled_RA[i])):
            if EOid is not None:
                minI, minBeam = 0, 0
            if (EOid is not None) and (separated['extsources'][i][j]['ID'] != EOid):
                continue
            print "Plotting EOid:", separated['extsources'][i][j]['ID']
            if (sum(unmodeled_FLUX[i][j]) > minI)
            and ((sum(unmodeled_XX[i][j]) + sum(unmodeled_YY[i][j])) / sum(unmodeled_FLUX[i][j]) > minBeam):

                diffuse_RA_total = copy.deepcopy(unmodeled_RA[i][j])
                diffuse_DEC_total = copy.deepcopy(unmodeled_DEC[i][j])
                diffuse_FLUX_total = copy.deepcopy(unmodeled_FLUX[i][j])

                all_framed = framer(all_RA[i], all_DEC[i])
                all_RA_zoom = [all_framed['RA_zoom_min'], all_framed['RA_zoom_max']]
                all_DEC_zoom = [all_framed['DEC_zoom_min'], all_framed['DEC_zoom_max']]
                all_n_bins = min(int(max(all_RA_zoom[1] - all_RA_zoom[0], all_DEC_zoom[1] - all_DEC_zoom[0]) / binwidth), 1024)
                all_RA_total = np.array(all_RA[i])
                all_DEC_total = np.array(all_DEC[i])
                all_FLUX_total = np.array(all_FLUX[i])
                all_XX_total = np.array(all_XX[i])
                all_YY_total = np.array(all_YY[i])
                all_BEAM_total = np.array(all_BEAM[i])
                (all_pixels, all_RA_pixel_centers, all_DEC_pixel_centers) = pixelate(
                    all_RA_zoom, all_DEC_zoom, all_n_bins, all_RA_total, all_DEC_total, all_FLUX_total)
                (all_pixels_contour, all_RA_pixel_centers_contour, all_DEC_pixel_centers_contour) = pixelate(
                    all_RA_zoom, all_DEC_zoom, 50, all_RA_total, all_DEC_total, all_BEAM_total)
                all_pixels[all_pixels == 0] = pixelreplacement
                all_convolved = convolve_fft(all_pixels, kernel)

                modeled_framed = framer(modeled_RA[i][j], modeled_DEC[i][j])
                modeled_RA_zoom = [modeled_framed['RA_zoom_min'], modeled_framed['RA_zoom_max']]
                modeled_DEC_zoom = [modeled_framed['DEC_zoom_min'], modeled_framed['DEC_zoom_max']]
                modeled_RA_total = np.array(modeled_RA[i][j])
                modeled_DEC_total = np.array(modeled_DEC[i][j])
                modeled_FLUX_total = np.array(modeled_FLUX[i][j])
                modeled_n_bins = int((modeled_framed['RA_zoom_max'] - modeled_framed['RA_zoom_min']) / binwidth)
                print "RA range:", (modeled_framed['RA_zoom_max'] - modeled_framed['RA_zoom_min']), "bins:", modeled_n_bins
                (modeled_pixels, modeled_RA_pixel_centers, modeled_DEC_pixel_centers) = \
                    pixelate(modeled_RA_zoom, modeled_DEC_zoom, modeled_n_bins,
                             modeled_RA_total, modeled_DEC_total, modeled_FLUX_total)
                modeled_pixels[modeled_pixels == 0] = pixelreplacement
                modeled_pixels = convolve(modeled_pixels, kernel)

                unmodeled_framed = modeled_framed
                unmodeled_RA_zoom = modeled_RA_zoom
                unmodeled_DEC_zoom = modeled_DEC_zoom
                unmodeled_RA_total = np.array(unmodeled_RA[i][j])
                unmodeled_DEC_total = np.array(unmodeled_DEC[i][j])
                unmodeled_FLUX_total = np.array(unmodeled_FLUX[i][j])
                unmodeled_n_bins = modeled_n_bins
                (unmodeled_pixels, unmodeled_RA_pixel_centers, unmodeled_DEC_pixel_centers) = \
                    pixelate(unmodeled_RA_zoom, unmodeled_DEC_zoom, unmodeled_n_bins,
                             unmodeled_RA_total, unmodeled_DEC_total, unmodeled_FLUX_total)
                unmodeled_pixels[unmodeled_pixels == 0] = pixelreplacement
                unmodeled_pixels = convolve(unmodeled_pixels, kernel)

                added_framed = modeled_framed
                added_RA_zoom = modeled_RA_zoom
                added_DEC_zoom = modeled_DEC_zoom
                added_RA_total = np.array(added_RA[i][j])
                added_DEC_total = np.array(added_DEC[i][j])
                added_FLUX_total = np.array(added_FLUX[i][j])
                added_n_bins = modeled_n_bins
                (added_pixels, added_RA_pixel_centers, added_DEC_pixel_centers) = \
                    pixelate(added_RA_zoom, added_DEC_zoom, added_n_bins,
                             added_RA_total, added_DEC_total, added_FLUX_total)
                added_pixels = convolve(added_pixels, kernel)

                removed_framed = modeled_framed
                removed_RA_zoom = modeled_RA_zoom
                removed_DEC_zoom = modeled_DEC_zoom
                removed_RA_total = np.array(removed_RA[i][j])
                removed_DEC_total = np.array(removed_DEC[i][j])
                removed_FLUX_total = np.array(removed_FLUX[i][j])
                removed_n_bins = modeled_n_bins
                (removed_pixels, removed_RA_pixel_centers, removed_DEC_pixel_centers) = \
                    pixelate(removed_RA_zoom, removed_DEC_zoom, removed_n_bins,
                             removed_RA_total, removed_DEC_total, removed_FLUX_total)
                removed_pixels[removed_pixels == 0] = pixelreplacement
                removed_pixels = convolve(removed_pixels, kernel)

                diffuse_framed = modeled_framed
                diffuse_RA_zoom = modeled_RA_zoom
                diffuse_DEC_zoom = modeled_DEC_zoom
                [diffuse_RA_total.remove(val) for val in removed_RA[i][j] if val in diffuse_RA_total]
                diffuse_RA_total = np.array(diffuse_RA_total)
                [diffuse_DEC_total.remove(val) for val in removed_DEC[i][j] if val in diffuse_DEC_total]
                diffuse_DEC_total = np.array(diffuse_DEC_total)
                [diffuse_FLUX_total.remove(val) for val in removed_FLUX[i][j] if val in diffuse_FLUX_total]
                diffuse_FLUX_total = np.array(diffuse_FLUX_total)
                diffuse_n_bins = modeled_n_bins
                (diffuse_pixels, diffuse_RA_pixel_centers, diffuse_DEC_pixel_centers) = \
                    pixelate(diffuse_RA_zoom, diffuse_DEC_zoom, diffuse_n_bins,
                             diffuse_RA_total, diffuse_DEC_total, diffuse_FLUX_total)
                diffuse_pixels[diffuse_pixels == 0] = pixelreplacement
                diffuse_pixels = convolve(diffuse_pixels, kernel)

                ###
                height_ratios = [1, 4, .5, 4]
                width_ratios = [4, .25, 1.5, 4, .25, 1.5, 4, .25]
                wspace = 0.05
                hspace = 0.05
                fig = plt.figure(figsize=(sum(width_ratios) + wspace * (len(width_ratios) - 1),
                                          sum(height_ratios) + hspace * (len(height_ratios) - 1)))
                gs = gridspec.GridSpec(len(height_ratios), len(width_ratios), height_ratios=height_ratios, width_ratios=width_ratios)
                gs.update(left=0, right=1, bottom=0,
                          top=1, wspace=wspace, hspace=hspace)

                bbox_props = dict(boxstyle="square,pad=0.3", fc="white", ec="red", lw=2)

                ###

                fig.suptitle('EO Source {} from ObsID {}'.format
                             (separated['extsources'][i][j]['ID'],
                              [int(s) for s in re.findall('\d+', data['filenames'][i])][0],
                              separated['extsources'][i][j]['FREQ']), fontsize=20)

                # Unmodeled Plot
                ax1 = fig.add_subplot(gs[1, 0])
                unmodeled = ax1.imshow(np.transpose(unmodeled_pixels), norm=LogNorm(vmin=pixelreplacement, vmax=1),
                                       origin="lower", interpolation="none", cmap=cmap,
                                       extent=[unmodeled_RA_pixel_centers[0], unmodeled_RA_pixel_centers[-1],
                                               unmodeled_DEC_pixel_centers[0], unmodeled_DEC_pixel_centers[-1]])
                ax1.update({'title': 'Unmodeled with {} components, {:.4G} Janskies'
                            .format(len(unmodeled_RA[i][j]), sum(unmodeled_FLUX[i][j])),
                            'xlabel': 'RA',
                            'ylabel': 'DEC'})
                ax1.grid(True, ls='dashed', alpha=.75)
                ax1.set_xlim(ax1.get_xlim()[::-1])

                # Modeled Plot
                ax2 = fig.add_subplot(gs[1, 3])
                modeled = ax2.imshow(np.transpose(modeled_pixels), norm=LogNorm(vmin=pixelreplacement, vmax=1),
                                     origin="lower", interpolation="none", cmap=cmap,
                                     extent=[modeled_RA_pixel_centers[0], modeled_RA_pixel_centers[-1],
                                             modeled_DEC_pixel_centers[0], modeled_DEC_pixel_centers[-1]])
                ax2.update({'title': 'Modeled with {} components'.format(len(modeled_RA[i][j])),
                            'xlabel': 'RA',
                            'ylabel': 'DEC'})
                if max(removed_RA_total) == 0:
                    no_modeled = ax2.text(np.mean(modeled_RA_pixel_centers),
                                          np.mean(modeled_DEC_pixel_centers),
                                          "No Modeling Occurred", ha="center", va="center",
                                          size=15, bbox=bbox_props)
                    ax2.update({'title': ''})
                ax2.grid(True, ls='dashed', alpha=.75)
                ax2.set_xlim(ax2.get_xlim()[::-1])

                # Modeled Pre-compacted Scatter
                ax3 = fig.add_subplot(gs[1, 6])
                removed = ax3.scatter(removed_RA_total, removed_DEC_total,
                                      c=np.linspace(1, 0, len(removed_FLUX_total)),
                                      cmap=plt.cm.summer, s=2)
                rectangle_length = max((max(removed_RA_total) - min(removed_RA_total)),
                                       (max(removed_DEC_total) - min(removed_DEC_total)))
                ax3.add_patch(patches.Rectangle((min(removed_RA_total) - .1 * rectangle_length,
                                                 min(removed_DEC_total) - .1 * rectangle_length),
                                                1.2 * rectangle_length, 1.2 * rectangle_length,
                                                fill=False, color='coral'))
                ax3.grid(True, ls='dashed', alpha=.75)
                ax3.update({'title': 'Pre-compacted with {} components'.format(len(removed_RA[i][j])),
                            'xlabel': 'RA',
                            'ylabel': 'DEC',
                            'xlim': modeled_RA_zoom,
                            'ylim': modeled_DEC_zoom})
                if max(removed_RA_total) == 0:
                    no_modeled = ax3.text(np.mean(modeled_RA_pixel_centers),
                                          np.mean(modeled_DEC_pixel_centers),
                                          "No Modeling Occurred", ha="center", va="center",
                                          size=15, bbox=bbox_props)
                    ax3.update({'title': ''})
                ax3.set_xlim(ax3.get_xlim()[::-1])
                # Modeled Uncompacted
                ax4 = fig.add_subplot(gs[3, 0])
                all_plot = ax4.imshow(np.transpose(all_convolved), norm=LogNorm(vmin=pixelreplacement),
                                      origin="lower", interpolation="none", cmap=cmap,
                                      extent=[all_RA_pixel_centers[0], all_RA_pixel_centers[-1],
                                              all_DEC_pixel_centers[0], all_DEC_pixel_centers[-1]])
                contour_plot = ax4.contourf(np.transpose(all_pixels_contour), cmap=plt.cm.bone, alpha=.4,
                                            levels=np.linspace(min(all_BEAM_total), max(all_BEAM_total), 6),
                                            extent=[all_RA_pixel_centers[0], all_RA_pixel_centers[-1],
                                                    all_DEC_pixel_centers[0], all_DEC_pixel_centers[-1]])
                ax4.clabel(contour_plot, fontsize=8,
                           inline=False, colors='white', alpha=1)
                ax4.annotate("",
                             xy=(separated['extsources'][i][j]['RA'], separated['extsources'][i][j]['DEC']),
                             xycoords='data',
                             xytext=(separated['extsources'][i][j]['RA'] + 15, separated['extsources'][i][j]['DEC'] + 15),
                             textcoords='data',
                             arrowprops=dict(arrowstyle="->", color='white', connectionstyle="arc3"))

                ax4.update({'title': 'Observation',
                            'xlabel': 'RA',
                            'ylabel': 'DEC'})
                ax4.grid(True, ls='dashed', alpha=.75)
                ax4.set_xlim(ax4.get_xlim()[::-1])
                # Modeled Compacted
                ax5 = fig.add_subplot(gs[3, 3])
                diffuse = ax5.imshow(np.transpose(diffuse_pixels), norm=LogNorm(vmin=pixelreplacement, vmax=1),
                                     origin="lower", interpolation="none", cmap=plt.cm.bone,
                                     extent=[unmodeled_RA_pixel_centers[0], unmodeled_RA_pixel_centers[-1],
                                             unmodeled_DEC_pixel_centers[0], unmodeled_DEC_pixel_centers[-1]])
                added = ax5.imshow(np.transpose(added_pixels), norm=LogNorm(vmin=pixelreplacement, vmax=1),
                                   origin="lower", interpolation="none", cmap=cmap,
                                   extent=[modeled_RA_pixel_centers[0], modeled_RA_pixel_centers[-1],
                                           modeled_DEC_pixel_centers[0], modeled_DEC_pixel_centers[-1]])
                ax5.update({'title': 'Compacted with {} componenets, {:.4G} Janskies'.format(len(added_RA[i][j]), sum(added_FLUX[i][j])),
                            'xlabel': 'RA',
                            'ylabel': 'DEC'})
                if max(removed_RA_total) == 0:
                    no_modeled = ax5.text(np.mean(modeled_RA_pixel_centers),
                                          np.mean(modeled_DEC_pixel_centers),
                                          "No Modeling Occurred", ha="center", va="center",
                                          size=15, bbox=bbox_props)
                    ax5.update({'title': ''})
                ax5.grid(True, ls='dashed', alpha=.75)
                ax5.set_xlim(ax5.get_xlim()[::-1])

                # Modeled Pre-compacted Zoom
                ax6 = fig.add_subplot(gs[3, 6])
                removed_zoom = ax6.scatter(removed_RA_total, removed_DEC_total,
                                           c=np.linspace(1, 0, len(removed_FLUX_total)),
                                           cmap=plt.cm.summer, s=20)
                removed_centers = ax6.scatter(added_RA_total, added_DEC_total, c='red', marker='2', s=50)
                ax6.update({'title': 'Pre-compacted Components [Zoomed]',
                            'xlabel': 'RA',
                            'ylabel': 'DEC',
                            'xlim': [min(removed_RA_total) - .1 * rectangle_length,
                                     min(removed_RA_total) + 1.2 * rectangle_length],
                            'ylim': [min(removed_DEC_total) - .1 * rectangle_length,
                                     min(removed_DEC_total) + 1.2 * rectangle_length]})
                if max(removed_RA_total) == 0:
                    no_modeled = ax6.text(np.mean(removed_RA_total),
                                          np.mean(removed_DEC_total),
                                          "No Modeling Occurred", ha="center", va="center",
                                          size=15, bbox=bbox_props)
                    ax6.update({'title': ''})
                ax6.grid(True, ls='dashed', alpha=.75)
                ax6.set_xlim(ax6.get_xlim()[::-1])
                # Colorbars

                unmodeled_cbax = plt.subplot(gs[1, 1])
                unmodeled_cb = Colorbar(ax=unmodeled_cbax, mappable=unmodeled, orientation='vertical', ticklocation='right')
                unmodeled_cb.set_label(r'Janskies', labelpad=10)

                modeled_cbax = plt.subplot(gs[1, 4])
                modeled_cb = Colorbar(ax=modeled_cbax, mappable=modeled, orientation='vertical', ticklocation='right')
                modeled_cb.set_label(r'Janskies', labelpad=10)

                removed_cbax = plt.subplot(gs[1, 7])
                removed_cb = Colorbar(ax=removed_cbax, mappable=removed, orientation='vertical', ticklocation='right')
                removed_cb.set_ticks([1, 0])
                removed_cb.set_ticklabels(['First', 'Last'])

                removed_zoom_cbax = plt.subplot(gs[3, 7])
                removed_zoom_cb = Colorbar(ax=removed_zoom_cbax, mappable=removed_zoom, orientation='vertical', ticklocation='right')
                removed_zoom_cb.set_ticks([1, 0])
                removed_zoom_cb.set_ticklabels(['First', 'Last'])

                plt.savefig('/home/champ6/moon/comparisonplots/EO' +
                            '{}'.format(separated['extsources'][i][j]['ID']) +
                            '.png', bbox_inches='tight')

        plt.show()
